<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寒砧</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-24T04:36:23.937Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>寒砧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java实现生命游戏</title>
    <link href="http://yoursite.com/2018/12/24/java%E5%AE%9E%E7%8E%B0%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2018/12/24/java实现生命游戏/</id>
    <published>2018-12-24T04:26:05.901Z</published>
    <updated>2018-12-24T04:36:23.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、分析与思考"><a href="#一、分析与思考" class="headerlink" title="一、分析与思考"></a>一、分析与思考</h3><p>软件工程实验课第一节课让用java做了一个比较简单的程序-生命游戏</p><h4 id="1-游戏规则"><a href="#1-游戏规则" class="headerlink" title="1.  游戏规则"></a>1.  游戏规则</h4><p>生命游戏在初始化之后，按照以下规则不断演化繁殖：每个细胞的‘生’或‘死’由它8个邻居细胞的状态决定。<br><img src="1.gif" alt="测试"><br>（1）“人口过少”：任何活细胞如果活邻居少于2个，则死亡。<br>（2）“正常”：任何活细胞如果活邻居为2个或3个，则继续活着。<br>（3）“人口过多”：任何活细胞如果活邻居大于3个，则死亡。<br>（4）“繁殖”：任何死细胞如果活邻居正好是3个，则活过来。</p><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h4><p>上述四步描述其实在算法中体现用三步描述即可<br>（1）如果活邻居等于3个，无论自己原来生死，都为活。<br>（2）如果活邻居等于2个且自己原来为生，则继续为生<br>（3） 其他，均为死。</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-简单分层"><a href="#1-简单分层" class="headerlink" title="1. 简单分层"></a>1. 简单分层</h4><p>因为这个小程序要体现软件工程的分层结构，因此，先根据思路，我把结构分为data层，service层，和应用层<br><img src="2.png" alt="这里写图片描述"><br>data层存放细胞数组类，service层存放算法逻辑，lifeGame应用层主要是界面的实现和启动</p><h4 id="2-核心代码"><a href="#2-核心代码" class="headerlink" title="2.核心代码"></a>2.核心代码</h4><h5 id="1-细胞生死即细胞矩阵的变化"><a href="#1-细胞生死即细胞矩阵的变化" class="headerlink" title="1. 细胞生死即细胞矩阵的变化"></a>1. 细胞生死即细胞矩阵的变化</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> CellArray <span class="keyword">generate</span>(CellArray cells) &#123;</span><br><span class="line">CellArray nextCells=<span class="keyword">new</span> CellArray(cells<span class="variable">.getRow</span>(),cells<span class="variable">.getCol</span>());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nextCells<span class="variable">.getRow</span>();i++) </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nextCells<span class="variable">.getCol</span>();j++) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> count=countNumber(cells,i,j);<span class="comment">//获取周围邻居数目</span></span><br><span class="line"> <span class="keyword">if</span>(count==<span class="number">3</span>) &#123;</span><br><span class="line"> nextCells<span class="variable">.setCell</span>(i, j, CellState<span class="variable">.LIVE</span><span class="variable">.getValue</span>());<span class="comment">//如果为三，活</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(count==<span class="number">2</span>&amp;&amp;cells<span class="variable">.getCell</span>(i, j)==CellState<span class="variable">.LIVE</span><span class="variable">.getValue</span>()) &#123;</span><br><span class="line"> nextCells<span class="variable">.setCell</span>(i, j, CellState<span class="variable">.LIVE</span><span class="variable">.getValue</span>());<span class="comment">//如果为二且为生，则生</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> nextCells<span class="variable">.setCell</span>(i, j, CellState<span class="variable">.DEAD</span><span class="variable">.getValue</span>());<span class="comment">//其他为死</span></span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  nextCells;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-定时器"><a href="#2-定时器" class="headerlink" title="2. 定时器"></a>2. 定时器</h5><p>定时器是用来每过一段时间就更新细胞矩阵<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Timer timer = new Timer();</span><br><span class="line">timer.schedule(new TimerTask() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">cells = GameService.generate(cells);</span><br><span class="line">++generation;</span><br><span class="line">label2.setText(<span class="string">"繁衍代数："</span> + generation);</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; row; <span class="built_in">i</span>++) &#123;</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; col; <span class="built_in">j</span>++) &#123;</span><br><span class="line"><span class="keyword">if</span> (cells.getCell(<span class="built_in">i</span>, <span class="built_in">j</span>) == CellState.LIVE.getValue()) &#123;</span><br><span class="line">btns[<span class="built_in">i</span>][<span class="built_in">j</span>].setBackground(Color.black);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">btns[<span class="built_in">i</span>][<span class="built_in">j</span>].setBackground(Color.white);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure></p><h3 id="三、实现效果"><a href="#三、实现效果" class="headerlink" title="三、实现效果"></a>三、实现效果</h3><p><img src="3.png" alt="这里写图片描述"><br><img src="4.png" alt="这里写图片描述"></p><p>###四、源码<br><a href="https://download.csdn.net/download/hanzhenbushihu/10662798" target="_blank" rel="noopener">https://download.csdn.net/download/hanzhenbushihu/10662798</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、分析与思考&quot;&gt;&lt;a href=&quot;#一、分析与思考&quot; class=&quot;headerlink&quot; title=&quot;一、分析与思考&quot;&gt;&lt;/a&gt;一、分析与思考&lt;/h3&gt;&lt;p&gt;软件工程实验课第一节课让用java做了一个比较简单的程序-生命游戏&lt;/p&gt;
&lt;h4 id=&quot;1-游戏
      
    
    </summary>
    
      <category term="java编程" scheme="http://yoursite.com/categories/java%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>以字节流接受键盘输入后写入文件，并以缓冲字节流复制文件</title>
    <link href="http://yoursite.com/2018/12/24/%E4%BB%A5%E5%AD%97%E8%8A%82%E6%B5%81%E6%8E%A5%E5%8F%97%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%90%8E%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%BB%A5%E7%BC%93%E5%86%B2%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/12/24/以字节流接受键盘输入后写入文件，并以缓冲字节流复制文件/</id>
    <published>2018-12-24T04:19:41.242Z</published>
    <updated>2018-12-24T04:38:16.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、代码及解释"><a href="#一、代码及解释" class="headerlink" title="一、代码及解释"></a>一、代码及解释</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> getValidLength(<span class="keyword">byte</span>[] bytes)&#123;<span class="comment">//获得缓存区中实际字节长</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == bytes || <span class="number">0</span> == bytes.length)</span><br><span class="line">        <span class="keyword">return</span> i ;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes[i] == <span class="string">'\0'</span>||bytes[i] == <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i-<span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">File</span> f1=<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"E:\\mytext.txt"</span>);<span class="comment">//源文件</span></span><br><span class="line"><span class="keyword">File</span> f2=<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"E:\\mynewtxt.txt"</span>);<span class="comment">//目标文件</span></span><br><span class="line"></span><br><span class="line">InputStream is=System.in;<span class="comment">//从键盘输入，以字节流</span></span><br><span class="line">FileOutputStream os=<span class="keyword">new</span> FileOutputStream(f1,<span class="keyword">true</span>);<span class="comment">//追加的形式</span></span><br><span class="line"><span class="keyword">byte</span> []bt=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//缓存字节数组</span></span><br><span class="line">is.<span class="keyword">read</span>(bt);<span class="comment">//读入数组</span></span><br><span class="line">os.<span class="keyword">write</span>(bt,<span class="number">0</span>,getValidLength(bt));<span class="comment">//写入时忽略的空的字节</span></span><br><span class="line"></span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(f1));<span class="comment">//读源文件流</span></span><br><span class="line">BufferedWriter wr=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(f2));<span class="comment">//写源文件流</span></span><br><span class="line">String s1=<span class="keyword">null</span>;<span class="comment">//缓存字符串</span></span><br><span class="line"><span class="keyword">while</span>((s1=br.readLine())!=<span class="keyword">null</span>) &#123;<span class="comment">//写</span></span><br><span class="line">wr.<span class="keyword">write</span>(s1);<span class="comment">//写</span></span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">wr.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、结果"><a href="#二、结果" class="headerlink" title="二、结果"></a>二、结果</h3><p><img src="1.png" alt="这里写图片描述"><br><img src="2.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、代码及解释&quot;&gt;&lt;a href=&quot;#一、代码及解释&quot; class=&quot;headerlink&quot; title=&quot;一、代码及解释&quot;&gt;&lt;/a&gt;一、代码及解释&lt;/h3&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="java编程" scheme="http://yoursite.com/categories/java%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java按行读取并存到数组(转换成任意类型)（算法题目常用）</title>
    <link href="http://yoursite.com/2018/12/24/java%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E5%B9%B6%E5%AD%98%E5%88%B0%E6%95%B0%E7%BB%84(%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B)%EF%BC%88%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E5%B8%B8%E7%94%A8%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/24/java按行读取并存到数组(转换成任意类型)（算法题目常用）/</id>
    <published>2018-12-24T04:07:29.349Z</published>
    <updated>2018-12-24T04:14:17.661Z</updated>
    
    <content type="html"><![CDATA[<ul><li>做用java做算法时，需要进行.txt文件的读写问题。<br>思考：现在知道如何用读每行的数据的，怎么把他们分开？<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从文件中读取</span></span><br><span class="line">File inFile=<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"E:\\input.txt"</span>);</span><br><span class="line">BufferedReader  br=<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(inFile));</span><br><span class="line"><span class="keyword">String</span> firstLine=br.readLine();<span class="comment">//读取一行，  </span></span><br><span class="line">以后使用一次就会读取一次，且读取数据为<span class="keyword">String</span> 类型</span><br><span class="line"><span class="keyword">String</span> arrs[]=as.split(<span class="string">" "</span>);<span class="comment">//用于读取以空格为间隔的数据，此时，数据均匀的存在字符串数组中</span></span><br><span class="line"><span class="comment">//然后循环转型赋值</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="built_in">File</span> outFile=<span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"E:\\output.txt"</span>);</span><br><span class="line">BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(outFile));</span><br><span class="line"><span class="keyword">String</span> s=<span class="keyword">String</span>.valueOf(data);</span><br><span class="line">writer.<span class="built_in">write</span>(s);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;做用java做算法时，需要进行.txt文件的读写问题。&lt;br&gt;思考：现在知道如何用读每行的数据的，怎么把他们分开？&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="java 编程" scheme="http://yoursite.com/categories/java-%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面试常见问题整理</title>
    <link href="http://yoursite.com/2018/12/21/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/21/面试常见问题整理/</id>
    <published>2018-12-21T06:18:33.000Z</published>
    <updated>2018-12-21T06:22:55.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络篇"><a href="#计算机网络篇" class="headerlink" title="计算机网络篇"></a>计算机网络篇</h3><h4 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h4><p>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“握手”才能建立起来  </p><h5 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h5><p>我要和你建立链接！  （发送端首先发送一个带SYN的数据包）<br>你真的要和我建立链接么？（接收端回传一个SYN/ACK的数据包以便是传达确认信息 ）<br>我真的要和你建立链接（发送端回传一个带ACK标志的数据包，代表握手结束）  </p><h5 id="2-为什么TCP链接需要三次握手，两次不可以么，为什么？"><a href="#2-为什么TCP链接需要三次握手，两次不可以么，为什么？" class="headerlink" title="2.为什么TCP链接需要三次握手，两次不可以么，为什么？"></a>2.为什么TCP链接需要三次握手，两次不可以么，为什么？</h5><p>为了防止 已失效的链接请求报文突然又传送到了服务端，因而产生错误。</p><h5 id="3-四次挥手"><a href="#3-四次挥手" class="headerlink" title="3.四次挥手"></a>3.四次挥手</h5><p>第一次，A端像B端发送FIN结束报文段，准备关闭连接<br>第二次，B端确认A端的FIN，表示自己已经收到对方关闭连接的请求<br>中间这段时间，A端停止向B端发送数据，但是B端可以向A端发送数据，要将自己未处理完任务处理完<br>第三次，B端向A端发送FIN结束报文段，准备关闭连接<br>第四次，A端确认B端的FIN，进入TIME_WAIT状态，此时A端进程已经退出，但是连接还在<br>当B端收到A端的ACK之后，先断开连接<br>当A端等待2 MSL之后，确认的B端接收到ACK后，再断开连接<br>发起断开连接请求的一端最后要进入有一个TIME_WAIT状态<br>发起连接请求的可以是客户端也可以是服务器端  </p><h4 id="Http和Https"><a href="#Http和Https" class="headerlink" title="Http和Https"></a>Http和Https</h4><h5 id="1-二者区别"><a href="#1-二者区别" class="headerlink" title="1.二者区别"></a>1.二者区别</h5><p>Http协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：<br>端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；<br>资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；<br>开销：Https通信需要证书，而证书一般需要向认证机构购买；<br>Https的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。  </p><h5 id="2-htttp请求头"><a href="#2-htttp请求头" class="headerlink" title="2.htttp请求头"></a>2.htttp请求头</h5><ol start="3"><li>DNS<br>Domain name system;</li><li><p>get/post 二者区别<br>get参数通过url传递，post放在request body中<br>get请求在url中传递的参数是有长度限制的（各种浏览器的区别），而post没有<br>get比post更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息<br>get请求参数会被完整保留在浏览历史记录里，而post中的参数不会被保留<br>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。<br>GET产生一个TCP数据包；POST产生两个TCP数据包。</p></li><li><p>http 的报文格式<br>（1）请求行（requestline）<br>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。例如，GET /index.html HTTP/1.1。<br>使用GET方法时，请求参数和对应的值附加在URL后面，利用一个问号（“?”）代表URL的结尾与请求参数的开始，传递参数长度受限制。例如，/index.jsp?id=100&amp;op=bind。<br>POST：当客户端给服务器提供信息较多时可以使用POST方法。POST方法将请求参数封装在HTTP请求数据中，以名称/值的形式出现，可以传输大量数据，可用来传送文件。<br>（2）请求头部（header）<br>　请求头部：请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息，典型的请求头有：<br>　　● User-Agent：产生请求的浏览器类型;<br>　　● Accept：客户端可识别的响应内容类型列表;星号 “ <em> ” 用于按范围将类型分组，用 “ </em>/<em> ” 指示可接受全部类型，用“ type/</em> ”指示可接受 type 类型的所有子类型;<br>　　● Accept-Language：客户端可接受的自然语言;<br>　　● Accept-Encoding：客户端可接受的编码压缩格式;<br>　　● Accept-Charset：可接受的应答的字符集;<br>　　● Host：请求的主机名，允许多个域名同处一个IP 地址，即虚拟主机;<br>　　● connection：连接方式(close 或 keepalive);<br>　　● Cookie：存储于客户端扩展字段，向同一域名的服务端发送属于该域的cookie;<br>（3）空行<br>结束请求头<br>（4）请求正文<br>POST中使用。POST方法适用于需要client填写表单的场合，与请求数据相关的最常用的请求头是Content-Type 和Content-Length</p></li></ol><h3 id="数据结构及其算法篇"><a href="#数据结构及其算法篇" class="headerlink" title="数据结构及其算法篇"></a>数据结构及其算法篇</h3><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><ol><li>快排<br>（1）算法思想<br>选择一个轴值（可以是第一个），然后左右交替扫描使大于轴值的在轴值右边，小于轴值的数在轴值左边。然后递归求解。<br>（2）算法实现<br>（3）效率分析<br>当选择的轴值恰好为中间的值时<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">O(nlog_2n)</span><br><span class="line">```  </span><br><span class="line">  当正序或者逆序时</span><br><span class="line">则为</span><br><span class="line"></span><br><span class="line">```math</span><br><span class="line">O(n^2)</span><br></pre></td></tr></table></figure></li></ol><p>平均为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">O(nlog_2n)</span><br><span class="line">```  </span><br><span class="line">2. 选择排序  </span><br><span class="line">（1）算法思想  </span><br><span class="line"> 进行n趟排序，第i趟排序时，将下标i-n中的最小值（只需要记录位置）  替换i的值。外层循环进行的同时，内层循环的长度逐渐减小。  </span><br><span class="line">（2）算法实现  </span><br><span class="line">（3）效率分析</span><br><span class="line">```math</span><br><span class="line">O(n^2)</span><br></pre></td></tr></table></figure></p><p>由于交换的次数比较少（找最小的值只记录）移动比较少。</p><ol start="3"><li>冒泡排序<br>（1）算法思想<br>两两比较交换位置，每一趟使未排序的中的最大值浮出来。</li></ol><p>（2）算法实现<br>（3）效率分析<br>4.</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h5 id="1-两个栈实现一个队列。"><a href="#1-两个栈实现一个队列。" class="headerlink" title="1. 两个栈实现一个队列。"></a>1. 两个栈实现一个队列。</h5><p>思路：两个栈,stack1,stack2，进队的时候直接入stack1,出队的时候判断stack2，若为空，将stack1装入stack2,若不为空弹出stack2栈顶。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> StacksToQueue   </span><br><span class="line">&#123;  </span><br><span class="line">     Stack&lt;Integer&gt; stack1=<span class="keyword">new</span> Stack&lt;Integer&gt;() ;</span><br><span class="line">     Stack&lt;Integer&gt; stack2=<span class="keyword">new</span> Stack&lt;Integer&gt;();  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> addToTail(<span class="keyword">int</span> x)<span class="comment">//添加元素到队尾   --进队---  </span></span><br><span class="line">     &#123;  </span><br><span class="line">         stack1.<span class="keyword">push</span>(x);  </span><br><span class="line"></span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> deleteHead()<span class="comment">//删除对首      --出队---    不需是队不为空才能删除呀~~~~  </span></span><br><span class="line">     &#123;  </span><br><span class="line">         <span class="keyword">if</span>( (stack1.<span class="keyword">size</span>()+stack2.<span class="keyword">size</span>())!=<span class="number">0</span>)<span class="comment">//队列不为空  </span></span><br><span class="line">         &#123;  </span><br><span class="line">             <span class="keyword">if</span>(stack2.isEmpty())<span class="comment">//若stack2为空，则把stack1全部加入stack2  </span></span><br><span class="line">             <span class="keyword">while</span>(!stack1.isEmpty()) &#123;</span><br><span class="line">             stack2.<span class="keyword">push</span>(stack1.<span class="keyword">pop</span>());</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span>  stack2.<span class="keyword">pop</span>();  </span><br><span class="line"></span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">else</span>  </span><br><span class="line">         &#123;  </span><br><span class="line">             System.out.<span class="keyword">println</span>(<span class="string">"队列已经为空，不能执行从队头出队"</span>);  </span><br><span class="line">             <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">         &#125;  </span><br><span class="line"></span><br><span class="line">     &#125;  </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><h5 id="两个队列实现一个栈"><a href="#两个队列实现一个栈" class="headerlink" title="两个队列实现一个栈"></a>两个队列实现一个栈</h5><ol><li>思想是两个队列queue1 ,queue2  入栈时，入queue1,出栈时将queue1除最后一个元素入queue2,再出第一个的头。再把queue2的元素入queue1;<br>2.前面的思路是每次出栈需要移动两次，所以可以优化，比如说可以看出每次删除操作需要移进移除两次。效率不高。可以得出插入时插入不为空的队列（另一个为空，如果两个都为空，则选择第一个），出栈时选择空的为辅助队列。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> QueuesToStack   </span><br><span class="line">&#123;  </span><br><span class="line">    LinkedList&lt;Integer&gt; queue1=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();  </span><br><span class="line">    LinkedList&lt;Integer&gt; queue2=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">push</span>(<span class="keyword">int</span> value)<span class="comment">//入栈  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(queue1.<span class="keyword">size</span>()&gt;=queue2.<span class="keyword">size</span>())&#123;</span><br><span class="line">              queue1.addLast(value);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            queue2.addLast(value); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">pop</span>()<span class="comment">//出栈     必须是非空的栈才能出栈啊  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>((queue1.<span class="keyword">size</span>()+queue2.<span class="keyword">size</span>())!=<span class="number">0</span>)<span class="comment">//栈不为空  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">//移动一个队的n-1个到另一个中  </span></span><br><span class="line">            <span class="keyword">if</span>(!queue1.isEmpty())</span><br><span class="line">            &#123;  </span><br><span class="line">                   <span class="keyword">while</span>(queue1.<span class="keyword">size</span>()&gt;<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                queue2.addLast(queue1.removeFirst());  </span><br><span class="line">            &#125;  </span><br><span class="line">                <span class="keyword">return</span> queue1.removeFirst();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">while</span>(queue2.<span class="keyword">size</span>()&gt;<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                queue1.addLast(queue2.removeFirst());  </span><br><span class="line">            &#125;  </span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"栈已经为空啦，不能出栈"</span>);  </span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ol><li>反转链表<br>思路是 定义三个节点，分别为现在的节点，前一节点<br>后一节点。首先用后一节点保存当前节点后一节点信息。<br>然后将前一节点赋值给当前节点后一节点。<br>再将本节点赋值给前一节点<br>将原链表的后一节点赋值给当前节点。遍历<br>代码<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode * <span class="attribute">pnow</span>=head;</span><br><span class="line">     struct ListNode * <span class="attribute">pnext</span>=<span class="literal">NULL</span>;</span><br><span class="line">    struct ListNode * <span class="attribute">pre</span>=<span class="literal">NULL</span>;</span><br><span class="line">    struct ListNode * <span class="attribute">tail</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(pnow!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="attribute">pnext</span>=pnow-&gt;next;//保留后继结点</span><br><span class="line">        <span class="keyword">if</span>(pnow-&gt;<span class="attribute">next</span>==NULL)&#123;</span><br><span class="line">            <span class="attribute">tail</span>=pnow;</span><br><span class="line">        &#125;</span><br><span class="line">        pnow-&gt;<span class="attribute">next</span>=pre;//反转</span><br><span class="line">        <span class="attribute">pre</span>=pnow;//前结点赋值</span><br><span class="line">        <span class="attribute">pnow</span>=pnext;//继续</span><br><span class="line">    &#125;</span><br><span class="line">    return tail;</span><br></pre></td></tr></table></figure></li></ol><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct BTree&#123;</span><br><span class="line">   <span class="built_in"> type </span>data;</span><br><span class="line">    struct BTree leftChild;</span><br><span class="line">    struct BTree rightChild;</span><br><span class="line">&#125;BTree;</span><br></pre></td></tr></table></figure><ol><li>二叉树遍历<br>递归遍历<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//先序遍历</span><br><span class="line">BTree *  preOrder(BTree* <span class="literal">T</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">T</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    Printf(<span class="keyword">...</span>);</span><br><span class="line">    preOder(<span class="literal">T</span>-&gt;leftChild);</span><br><span class="line">    preOder(<span class="literal">T</span>-&gt;rightChild);</span><br><span class="line">&#125;</span><br><span class="line">//中序遍历</span><br><span class="line">BTree *  preOrder(BTree* <span class="literal">T</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">T</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    preOder(<span class="literal">T</span>-&gt;leftChild);</span><br><span class="line">     Printf(<span class="keyword">...</span>);</span><br><span class="line">    preOder(<span class="literal">T</span>-&gt;rightChild);</span><br><span class="line">&#125;</span><br><span class="line">// 后续遍历</span><br><span class="line">BTree *  preOrder(BTree* <span class="literal">T</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">T</span>==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    preOder(<span class="literal">T</span>-&gt;leftChild);</span><br><span class="line">    preOder(<span class="literal">T</span>-&gt;rightChild);</span><br><span class="line">     Printf(<span class="keyword">...</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>非递归遍历<br>主要借助栈</p><h3 id="JAVA-语言相关问题"><a href="#JAVA-语言相关问题" class="headerlink" title="JAVA 语言相关问题"></a>JAVA 语言相关问题</h3><ol><li>JavaBean实际上是指一种特殊的Java类，它通常用来实现一些比较常用的简单功能，并可以很容易的被重用或者是插入其他应用程序中去。所有遵循“一定编程原则”的Java类都可以被称作JavaBean。</li><li>hashMap hashtable<br>hashMap 不是线程安全的，hashtable 是线程安全的</li><li>线程的几种建方式<br>（1）继承Thread 重写run()<br>（2）实现Runnable 实现run()</li><li>set 与map的区别</li><li>|比较    |List    |Set|    Map|<br>|:——:|:——:|:——:|:——:|<br>|继承接口    |Collection|    Collection|<br>|常见实现类|    AbstractList(其常用子类有ArrayList、LinkedList、Vector)|    AbstractSet(其常用子类有HashSet、LinkedHashSet、TreeSet)|    HashMap、HashTable|<br>|常见方法    |add( )、remove( )、clear( )、get( )、contains( )、size( )    |add( )、remove( )、clear( )、contains( )、size( )|    put( )、get( )、remove( )、clear( )、containsKey( )、containsValue( )、keySet( )、values( )、size( )|<br>|元素|    可重复|    不可重复(用equals()判断)|    不可重复|<br>|顺序|    有序|    无序(实际上由HashCode决定)    |<br>|线程安全    |Vector线程安全    |    Hashtable线程安全|</li></ol><h3 id="spring-springBoot-springCloud框架问题"><a href="#spring-springBoot-springCloud框架问题" class="headerlink" title="spring/springBoot/springCloud框架问题"></a>spring/springBoot/springCloud框架问题</h3><ol><li>spring的原理<br>Spring是一个开源容器框架，可以接管web层，业务层，dao层，持久层的组件，并且可以配置各种bean,和维护bean与bean之间的关系。其核心就是控制反转(IOC),和面向切面(AOP),简单的说就是一个分层的轻量级开源框架</li></ol><h3 id="dubbo框架"><a href="#dubbo框架" class="headerlink" title="dubbo框架"></a>dubbo框架</h3><p>Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。<br>简单的说，dubbo就是个服务框架，如果没有分布式的需求，其实是不需要用的.<br>Provider: 暴露服务的服务提供方。<br>Consumer: 调用远程服务的服务消费方。<br>Registry: 服务注册与发现的注册中心。<br>Monitor: 统计服务的调用次调和调用时间的监控中心。<br>Container: 服务运行容器。</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><ol><li>存储类型<br>string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</li></ol><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络篇&quot;&gt;&lt;a href=&quot;#计算机网络篇&quot; class=&quot;headerlink&quot; title=&quot;计算机网络篇&quot;&gt;&lt;/a&gt;计算机网络篇&lt;/h3&gt;&lt;h4 id=&quot;TCP-UDP&quot;&gt;&lt;a href=&quot;#TCP-UDP&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动面试经历</title>
    <link href="http://yoursite.com/2018/12/21/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>http://yoursite.com/2018/12/21/字节跳动面试经历/</id>
    <published>2018-12-21T04:09:09.000Z</published>
    <updated>2018-12-21T06:24:32.253Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>手机App内置http服务器实现电脑端访问手机html页面（上）</title>
    <link href="http://yoursite.com/2018/12/21/%E6%89%8B%E6%9C%BAapp%E5%86%85%E7%BD%AEhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E7%94%B5%E8%84%91%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%89%8B%E6%9C%BAhtml%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2018/12/21/手机app内置http服务器实现电脑端访问手机html页面/</id>
    <published>2018-12-21T02:56:43.466Z</published>
    <updated>2018-12-21T03:59:43.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、准备及原型"><a href="#一、准备及原型" class="headerlink" title="一、准备及原型"></a>一、准备及原型</h4><ol><li>前言 这个暑假接了一个小项目，用cordova实现一个表型采集的app，其中一个文件传输导入导出的的需求使：手机端开启服务，在同一个wifi环境下，电脑浏览器进行访问手机ip地址，然后显示出手机暴露的页面，再进行相关的操作。<br>第一念头：什么鬼的需求！</li></ol><p><img src="![这里写图片描述]/1.jpg" alt="这里写图片描述"></p><p>但是还是硬着头皮按照产品经理学长的的意思，画出该功能相关的原型：</p><ol start="2"><li>原型<br>手机端：<br><img src="![这里写图片描述]/2.png" alt="这里写图片"><br>电脑端：<br><img src="![这里写图片描述]/3.png" alt="这里写图片描述"><h4 id="二、httpd插件"><a href="#二、httpd插件" class="headerlink" title="二、httpd插件"></a>二、httpd插件</h4></li></ol><p>1..思路分析<br>大概就是上述原型的意思了，这个有点像小米文件管理中的远程管理功能，不过它的是ftp协议的服务，只能进行简单的文件传输。而需求是可以访问到html页面。<br>按照这种思路即是将手机变成一个http服务器，这样需要重写很多东西，这个项目是基于html的移动app，采用的是cordova 框架，于是我先去cordova 官方插件，功夫不负有心人，找到了一个httpd的插件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin <span class="keyword">add</span><span class="bash"> cordova-plugin-httpd</span></span><br></pre></td></tr></table></figure><p>添加成功</p><ol start="2"><li>api：先是看了一下readme提供的api，嗯只有四个分别是启动服务、停止服务，显示手机暴露的ip、显示根目录</li></ol><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">startServer( <span class="name">options</span>, success_callback, error_callback )<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">stopServer( <span class="name">success_callback</span>, error_callback )<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">getURL( <span class="name">success_callback</span>, error_callback )<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">getLocalPath( <span class="name">success_callback</span>, error_callback )<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="三-、使用及开发"><a href="#三-、使用及开发" class="headerlink" title="三 、使用及开发"></a>三 、使用及开发</h4><p>1 . index.html界面分别创建四个按钮</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"startServer('');"</span>&gt;</span>Start CorHttpd at assets/www/filetransfer<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"startServer('/');"</span>&gt;</span>Start CorHttpd at /<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"stopServer();"</span>&gt;</span>Stop CorHttpd<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"updateStatus();"</span>&gt;</span>Check Status<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 .根据插件的示例编写js</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpd = <span class="literal">null</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>, onDeviceReady, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       httpd = ( cordova &amp;&amp; cordova.plugins &amp;&amp; cordova.plugins.CorHttpd ) ? <span class="attribute">cordova.plugins.CorHttpd</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       startServer(<span class="string">""</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">updateStatus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">document</span>.getElementById(<span class="string">'location'</span>).innerHTML = <span class="string">"document.location.href: "</span> + <span class="built_in">document</span>.location.href;</span><br><span class="line">       <span class="keyword">if</span>( httpd ) &#123;</span><br><span class="line">           httpd.getURL(<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="built_in">url</span>.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">"server is up: &lt;a href='"</span> + <span class="built_in">url</span> + <span class="string">"' target='_blank'&gt;"</span> + <span class="built_in">url</span> + <span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">               &#125; <span class="title">else</span> &#123;</span><br><span class="line">                   <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">"server is down."</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           httpd.getLocalPath(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">               <span class="built_in">document</span>.getElementById(<span class="string">'localpath'</span>).innerHTML = <span class="string">"&lt;br/&gt;localPath: "</span> + path;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; <span class="title">else</span> &#123;</span><br><span class="line">           alert(<span class="string">'CorHttpd plugin not available/ready.'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">startServer</span>(<span class="params"> wwwroot </span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ( httpd ) &#123;</span><br><span class="line">           httpd.getURL(<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="built_in">url</span>.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">"server is up: &lt;a href='"</span> + <span class="built_in">url</span> + <span class="string">"' target='_blank'&gt;"</span> + <span class="built_in">url</span> + <span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">               &#125; <span class="title">else</span> &#123;</span><br><span class="line">                   httpd.startServer(&#123;</span><br><span class="line">                       <span class="string">'www_root'</span> : wwwroot,</span><br><span class="line">                       <span class="string">'port'</span> : <span class="number">8080</span></span><br><span class="line">                   &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> url </span>)</span>&#123;</span><br><span class="line">                       <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">"server is started: &lt;a href='"</span> + <span class="built_in">url</span> + <span class="string">"' target='_blank'&gt;"</span> + <span class="built_in">url</span> + <span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">                   &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> error </span>)</span>&#123;</span><br><span class="line">                       <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">'failed to start server: '</span> + error;</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">       &#125; <span class="title">else</span> &#123;</span><br><span class="line">           alert(<span class="string">'CorHttpd plugin not available/ready.'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">stopServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ( httpd ) &#123;</span><br><span class="line">           httpd.stopServer(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">'server is stopped.'</span>;</span><br><span class="line">           &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"> error </span>)</span>&#123;</span><br><span class="line">               <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).innerHTML = <span class="string">'failed to stop server'</span> + error;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; <span class="title">else</span> &#123;</span><br><span class="line">           alert(<span class="string">'CorHttpd plugin not available/ready.'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> type = <span class="built_in">window</span>.TEMPORARY;</span><br><span class="line">       <span class="keyword">var</span> <span class="built_in">size</span> = <span class="number">5</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">window</span>.requestFileSystem(type, <span class="built_in">size</span>, successCallback, errorCallback)</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">fs</span>) </span>&#123;</span><br><span class="line">           fs.root.getFile(<span class="string">'log.txt'</span>, &#123;<span class="attribute">create</span>: <span class="literal">true</span>, <span class="attribute">exclusive</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">fileEntry</span>) </span>&#123;</span><br><span class="line">               alert(<span class="string">'File creation successfull!'</span>)</span><br><span class="line">           &#125;, errorCallback);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">           alert(<span class="string">"ERROR: "</span> + error.code)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>3  . 运行<br>安装app,手机端并启动服务，当电脑端和手机在同一网络环境下，电脑端访问地址。<br>手机端：<br><img src="![这里写图片描述]/4.png" alt="这里写图片描述"><br>电脑端<br><img src="![这里写图片描述](/5.png" alt="这里写图片描述"><br>是我们手机端的index.html，也就是说暴露的就是我们编辑的页面，之前的需求端要求的页面是自定义的，所以应该可以自定义一个页面让手机端进行暴露。</p><p>4 . 修改源码指定要暴露的页面<br><img src="![这里写图片描述]/6.png" alt="这里写图片描述"><br> 找到插件的java源码 在选中的java 文件中查找index.html,改为自己制订暴露的html页面</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( res == <span class="literal">null</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// First try index.html and index.htm </span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">new</span> <span class="type">AndroidFile</span>( f, <span class="string">"filetransfer.html"</span> ).exists())</span><br><span class="line">f = <span class="keyword">new</span> <span class="type">AndroidFile</span>( homeDir, uri + <span class="string">"/filetransfer.html"</span> );</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">new</span> <span class="type">AndroidFile</span>( f, <span class="string">"filetransfer.htm"</span> ).exists())</span><br><span class="line">f = <span class="keyword">new</span> <span class="type">AndroidFile</span>( homeDir, uri + <span class="string">"/filetransfer.htm"</span> );</span><br><span class="line"><span class="comment">// No index file, list the directory if it is readable</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( allowDirectoryListing &amp;&amp; f.canRead() )</span><br></pre></td></tr></table></figure><p>5.结果<br>电脑端显示界面，成功实现<br><img src="![这里写图片描述]/7.png" alt="这里写图片描述"><br>下一步就是文件的相关操作了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、准备及原型&quot;&gt;&lt;a href=&quot;#一、准备及原型&quot; class=&quot;headerlink&quot; title=&quot;一、准备及原型&quot;&gt;&lt;/a&gt;一、准备及原型&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;前言 这个暑假接了一个小项目，用cordova实现一个表型采集的app，其中一个文件传输
      
    
    </summary>
    
      <category term="cordova" scheme="http://yoursite.com/categories/cordova/"/>
    
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>Cordova环境搭建及编译</title>
    <link href="http://yoursite.com/2018/12/21/cordova%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2018/12/21/cordova环境搭建及编译/</id>
    <published>2018-12-21T02:53:15.296Z</published>
    <updated>2018-12-21T04:02:04.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置Cordova-开发环境"><a href="#配置Cordova-开发环境" class="headerlink" title="配置Cordova 开发环境"></a>配置Cordova 开发环境</h3><ol><li>下载安装node.js 安装下载</li><li>下载安装android Studio，进入界面后进入管理SDK,下载26</li><li>下载gardle3.3（可以先不下，一般构建的时候自动下载）</li><li>下载cordova:通过命令行输入<code>npm install -g cordova@7.1.0</code></li><li>命令行进入项目根目录执行如下命令：<br><code>`</code><h1 id="添加平台"><a href="#添加平台" class="headerlink" title="添加平台"></a>添加平台</h1>cordova platform add android</li></ol><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>cordova plugin add cordova-plugin-camera<br>cordova plugin add cordova-plugin-file</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>cordova build android<br>//找不到gradle 会自动下载，需要翻墙快一些，当然可以先下载好之后放入相关目录中</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>1.cordova run android  //通过USB,链接手机进行USB调试安装app<br>2.cordova emulate android  //通过模拟器进行安装app<br>运行命令二选一<br><code>`</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置Cordova-开发环境&quot;&gt;&lt;a href=&quot;#配置Cordova-开发环境&quot; class=&quot;headerlink&quot; title=&quot;配置Cordova 开发环境&quot;&gt;&lt;/a&gt;配置Cordova 开发环境&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;下载安装node.js 安装下载
      
    
    </summary>
    
      <category term="cordova" scheme="http://yoursite.com/categories/cordova/"/>
    
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>Cordova文件系统创建文件夹与读写文件实例</title>
    <link href="http://yoursite.com/2018/12/14/cordova%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8E%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/12/14/cordova文件系统创建文件夹与读写文件实例/</id>
    <published>2018-12-14T05:25:35.025Z</published>
    <updated>2018-12-21T06:20:29.763Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、cordova-文件系统"><a href="#一、cordova-文件系统" class="headerlink" title="一、cordova 文件系统"></a>一、cordova 文件系统</h3><p>####1. 安装插件<br>cordova  需要安装插件才能对对手机文件系统进行操作<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plagin <span class="keyword">add</span><span class="bash"> cordova-plugin-file</span></span><br></pre></td></tr></table></figure></p><h4 id="2-需要了解的插件api"><a href="#2-需要了解的插件api" class="headerlink" title="2. 需要了解的插件api"></a>2. 需要了解的插件api</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span> . cordova.file.externalRootDirectory ;</span><br><span class="line">/*获取手机外部存储根路径,与其类似的api请参考开发文档 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> . window.resolveLocalFileSystemURI(uir,<span class="function"><span class="keyword">function</span><span class="params">(entry)</span></span>&#123;&#125;,</span><br><span class="line">errorCallback);</span><br><span class="line"></span><br><span class="line">/* uir 就是之前的路径 ，<span class="function"><span class="keyword">function</span><span class="params">(entry)</span></span>&#123;&#125;，写法不一，函数可以写在外边，主要是为了接受entry实例 </span><br><span class="line">errorCallback 错误回调</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> . Entry.getDirectory(<span class="string">"dirName"</span>, &#123;<span class="built_in">create</span>: <span class="literal">true</span>,exclusive: <span class="literal">false</span>&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(dirEntry)</span></span> &#123;&#125;,</span><br><span class="line"> onErrorGetDir);</span><br><span class="line"></span><br><span class="line">/* 创建或打开文件夹 类似三个参数，第一个为创建或打开文件夹名,</span><br><span class="line">&#123;<span class="built_in">create</span>: <span class="literal">true</span>,exclusive: <span class="literal">false</span>&#125;为 创建/打开方式，exclusive: <span class="literal">false</span>，</span><br><span class="line">代表会若存在该文件夹会重写,因此可以默认<span class="literal">true</span></span><br><span class="line">onErrorGetDir 创建文件夹失败</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>  dirEntry.getFile( fileName, &#123; <span class="built_in">create</span>: <span class="literal">true</span>, exclusive: <span class="literal">false</span> &#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(fileEntry)</span></span> &#123;</span><br><span class="line">&#125;, onErrorCreateFile);</span><br><span class="line">/*与创建文件类似*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> .fileEntry.createWriter(<span class="function"><span class="keyword">function</span> <span class="params">(fileWriter)</span></span> &#123;</span><br><span class="line">        fileWriter.onwriteend = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line">        fileWriter.onwrite=<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;&#125;</span><br><span class="line">        fileWriter.onerror = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span></span> &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">        fileWriter.<span class="built_in">write</span>(dataObj);//写文件</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h3><h4 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1.创建文件夹"></a>1.创建文件夹</h4><p>以下代码在手机外部存储中先创建了一个”表型采集模版与数据”目录/文件夹<br>再在其中分别创建了”data”,”template”，“photo”三个同级文件夹。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>,initFileSystem,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化文件系统</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">initFileSystem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    writeDirectory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">writeDirectory</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dirUri = cordova.file.externalRootDirectory;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.resolveLocalFileSystemURI(dirUri,<span class="function"><span class="keyword">function</span> (<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        entry.getDirectory(<span class="string">"表型采集模版与数据"</span>, &#123;</span><br><span class="line">            create: <span class="literal">true</span>,</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">dirEntry</span>) </span>&#123;</span><br><span class="line">            dirEntry.getDirectory(<span class="string">'template'</span>, &#123; <span class="attr">create</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">subDirEntry</span>) </span>&#123;</span><br><span class="line">            &#125;, onErrorGetDir);</span><br><span class="line"></span><br><span class="line">            dirEntry.getDirectory(<span class="string">'data'</span>, &#123; <span class="attr">create</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">subDirEntry</span>) </span>&#123;</span><br><span class="line">            &#125;, onErrorGetDir);</span><br><span class="line">            dirEntry.getDirectory(<span class="string">'photos'</span>, &#123; <span class="attr">create</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">subDirEntry</span>) </span>&#123;</span><br><span class="line">            &#125;, onErrorGetDir);</span><br><span class="line">        &#125;,onErrorGetDir)</span><br><span class="line">    &#125;,errorCallback)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件夹创建失败回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onErrorGetDir</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"文件夹创建失败！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.toString());</span><br><span class="line">    alert(e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-在指定的文件夹中写文件"><a href="#2-在指定的文件夹中写文件" class="headerlink" title="2.在指定的文件夹中写文件"></a>2.在指定的文件夹中写文件</h4><p>在表型采集模版与数据/data文件夹中写入文件<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAs</span><span class="params">(obj,tempName,fileName)</span></span> &#123;//当然可以自定义简单的下载文件实现方式</span><br><span class="line"></span><br><span class="line">    var dirUri = cordova.file.externalRootDirectory;</span><br><span class="line"></span><br><span class="line">    window.resolveLocalFileSystemURI(dirUri,<span class="function"><span class="keyword">function</span> <span class="params">(Entry)</span></span> &#123;</span><br><span class="line">        Entry.getDirectory(<span class="string">"表型采集模版与数据"</span>, &#123;</span><br><span class="line">            <span class="built_in">create</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span> <span class="params">(dirEntry)</span></span> &#123;</span><br><span class="line">            dirEntry.getDirectory(<span class="string">'data'</span>, &#123; <span class="built_in">create</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(subDirEntry)</span></span> &#123;</span><br><span class="line">                savefile(subDirEntry,obj,fileName);</span><br><span class="line">            &#125;, onErrorGetDir);</span><br><span class="line"></span><br><span class="line">        &#125;,onErrorGetDir)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">savefile</span><span class="params">(dirEntry,fileData, fileName)</span></span>&#123;</span><br><span class="line">    dirEntry.getFile(</span><br><span class="line">        fileName, &#123;</span><br><span class="line">            <span class="built_in">create</span>: <span class="literal">true</span>,</span><br><span class="line">            exclusive: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="params">(fileEntry)</span></span> &#123;</span><br><span class="line">            writeFile(fileEntry, fileData);</span><br><span class="line"></span><br><span class="line">        &#125;, onErrorCreateFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span><span class="params">(fileEntry, dataObj)</span></span> &#123;</span><br><span class="line">    // Create a FileWriter object <span class="keyword">for</span> our FileEntry (<span class="built_in">log</span>.txt).</span><br><span class="line">    fileEntry.createWriter(<span class="function"><span class="keyword">function</span> <span class="params">(fileWriter)</span></span> &#123;</span><br><span class="line">        fileWriter.onwriteend = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        fileWriter.onwrite=<span class="function"><span class="keyword">function</span> <span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">'导出成功！'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fileWriter.onerror = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span></span> &#123;</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="string">'Failed file write: '</span> + e.toString());</span><br><span class="line">        &#125;;</span><br><span class="line">        fileWriter.<span class="built_in">write</span>(dataObj);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onErrorCreateFile</span><span class="params">(e)</span></span> &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'Failed create file: '</span> + e.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onErrorGetDir</span><span class="params">(error)</span></span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"文件夹创建失败！"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h3><p><img src="cordova文件系统创建文件夹与读写文件实例/1.png" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、cordova-文件系统&quot;&gt;&lt;a href=&quot;#一、cordova-文件系统&quot; class=&quot;headerlink&quot; title=&quot;一、cordova 文件系统&quot;&gt;&lt;/a&gt;一、cordova 文件系统&lt;/h3&gt;&lt;p&gt;####1. 安装插件&lt;br&gt;cordova
      
    
    </summary>
    
      <category term="cordova" scheme="http://yoursite.com/categories/cordova/"/>
    
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
  </entry>
  
</feed>
